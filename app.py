import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

def plot_decision_boundary(ax, xx, yy, labels_grid, cmap):
    """
    V·∫Ω ranh gi·ªõi quy·∫øt ƒë·ªãnh cho c√°c c·ª•m.
    Args:
        ax (matplotlib.axes.Axes): Axes ƒë·ªÉ v·∫Ω.
        xx (np.ndarray): L∆∞·ªõi x.
        yy (np.ndarray): L∆∞·ªõi y.
        labels_grid (np.ndarray): Nh√£n cho l∆∞·ªõi.
        cmap (matplotlib.colors.Colormap): B·∫£n ƒë·ªì m√†u.
    """
    ax.contourf(xx, yy, labels_grid.reshape(xx.shape), alpha=0.3, cmap=cmap)

# import functions from utils
from src.kmeans_custom import KMeansCustom
from src.kmeans_library import KMeansLibrary
from src.evaluation import ClusterEvaluator
from src.dbscan_library import DBSCANLibrary

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(page_title="Ph√¢n T√≠ch Ph√¢n C·ª•m", layout="wide")

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("·ª®ng d·ª•ng ph√¢n c·ª•m - Modular K-Means")

# 1. Load data
uploaded = st.sidebar.file_uploader("T·∫£i l√™n file CSV", type=["csv"])
if not uploaded:
    st.sidebar.warning("Vui l√≤ng t·∫£i l√™n m·ªôt file CSV ƒë·ªÉ ti·∫øp t·ª•c.")
    st.stop()

df = pd.read_csv(uploaded)

# 2. Feature selection
cols = st.sidebar.multiselect(
    "Ch·ªçn c√°c c·ªôt ƒë·ªÉ ph√¢n c·ª•m", df.columns.tolist(), df.columns[:2].tolist()
)
if len(cols) < 2:
    st.sidebar.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t 2 c·ªôt.")
    st.stop()

# 2.1 Handle features
# Numeric and categorical via one-hot
df_selected = df[cols]
df_processed = pd.get_dummies(df_selected, drop_first=True)
X_raw = df_processed.values
X = StandardScaler().fit_transform(X_raw)

# 3. Algorithm options
algo = st.sidebar.selectbox("Thu·∫≠t to√°n", ["KMeans (Vi·∫øt tay)", "KMeans (Th∆∞ vi·ªán)", "DBSCAN"])
k = st.sidebar.slider("S·ªë c·ª•m K", 2, 10, 3)
max_iter = st.sidebar.number_input("S·ªë v√≤ng l·∫∑p t·ªëi ƒëa", 10, 1000, 300)
tol = st.sidebar.number_input("Sai s·ªë (Tolerance)", 1e-6, 1e-1, 1e-4, format="%.1e")
random_state = st.sidebar.number_input("Tr·∫°ng th√°i ng·∫´u nhi√™n (Random state)", 0, 9999, 42)
if algo == "DBSCAN":
    eps = st.sidebar.number_input("B√°n k√≠nh (eps)", 0.01, 5.0, 0.5, format="%.2f")
    min_samples = st.sidebar.number_input("S·ªë m·∫´u t·ªëi thi·ªÉu (min_samples)", 1, 20, 5)

if st.sidebar.button("Ch·∫°y ph√¢n c·ª•m"):
    # 4. Run clustering
    if algo == "KMeans (Vi·∫øt tay)":
        kmeans = KMeansCustom(k=k, max_iters=max_iter, random_state=random_state)
        labels, centers = kmeans.fit(X)
    elif algo == "KMeans (Th∆∞ vi·ªán)":
        kmeans = KMeansLibrary(k=k, random_state=random_state)
        labels, centers = kmeans.fit(X)
    else:  # DBSCAN
        dbscan = DBSCANLibrary(eps=eps, min_samples=min_samples)
        labels = dbscan.fit(X)
        centers = None

    # 5. Evaluation
    evaluator = ClusterEvaluator()
    scores = evaluator.evaluate(X, labels, centers, method_name=algo)
    st.subheader("üìä C√°c ch·ªâ s·ªë ƒë√°nh gi√°")
    st.table(pd.DataFrame.from_dict(scores, orient='index', columns=['Gi√° tr·ªã']))

    # Gi·∫£i th√≠ch c√°c ch·ªâ s·ªë ƒë√°nh gi√°
    st.markdown("""
    **Gi·∫£i th√≠ch c√°c ch·ªâ s·ªë ƒë√°nh gi√°**:

    - **Silhouette Score**: ƒêo l∆∞·ªùng m·ª©c ƒë·ªô ph√π h·ª£p c·ªßa ƒëi·ªÉm d·ªØ li·ªáu v·ªõi c·ª•m c·ªßa n√≥ v√† s·ª± t√°ch bi·ªát v·ªõi c·ª•m kh√°c. Gi√° tr·ªã t·ª´ -1 ƒë·∫øn 1. **G·∫ßn 1 l√† t·ªët nh·∫•t** (c·ª•m r√µ r√†ng), g·∫ßn 0 l√† ch·ªìng l·∫•n, g·∫ßn -1 l√† sai c·ª•m.
    - **Davies-Bouldin Index**: ƒêo l∆∞·ªùng t·ª∑ l·ªá trung b√¨nh c·ªßa ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·ªØa c√°c c·ª•m. Gi√° tr·ªã kh√¥ng √¢m. **C√†ng th·∫•p c√†ng t·ªët** (c√°c c·ª•m t√°ch bi·ªát v√† t·∫≠p trung).
    - **Calinski-Harabasz Index**: ƒêo l∆∞·ªùng t·ª∑ l·ªá ph∆∞∆°ng sai gi·ªØa c√°c c·ª•m so v·ªõi b√™n trong c·ª•m. Gi√° tr·ªã cao. **C√†ng cao c√†ng t·ªët** (c·ª•m r√µ r√†ng, g·∫Øn k·∫øt).
    - **MSE (Mean Squared Error)** & **RMSE (Root Mean Squared Error)**: (Ch·ªâ cho K-Means) ƒêo l∆∞·ªùng t·ªïng b√¨nh ph∆∞∆°ng/cƒÉn b·∫≠c hai b√¨nh ph∆∞∆°ng kho·∫£ng c√°ch t·ª´ ƒëi·ªÉm ƒë·∫øn t√¢m c·ª•m. **C√†ng th·∫•p c√†ng t·ªët**.
    """)

    # 7. Cluster Summary
    st.subheader("üìã T√≥m t·∫Øt c√°c c·ª•m")

    # T·∫°o DataFrame t·∫°m v·ªõi nh√£n c·ª•m
    df_clustered = df_selected.copy()
    df_clustered['C·ª•m'] = labels

    # T√≠nh s·ªë l∆∞·ª£ng ƒëi·ªÉm trong m·ªói c·ª•m
    cluster_counts = df_clustered['C·ª•m'].value_counts().sort_index()
    st.write("**S·ªë l∆∞·ª£ng ƒëi·ªÉm trong m·ªói c·ª•m:**")
    st.table(cluster_counts)

    # T√≠nh ƒë·∫∑c ƒëi·ªÉm trung b√¨nh c·ªßa m·ªói c·ª•m
    cluster_summary = df_clustered.groupby('C·ª•m').mean()
    st.write("**ƒê·∫∑c ƒëi·ªÉm trung b√¨nh c·ªßa m·ªói c·ª•m:**")
    st.table(cluster_summary)

    # 6. Visualization
    if X.shape[1] > 2:
        pca = PCA(n_components=2)
        X2 = pca.fit_transform(X)
        centers2 = pca.transform(centers) if centers is not None else None
    else:
        X2, centers2 = X, centers

    # meshgrid
    x_min, x_max = X2[:,0].min()-1, X2[:,0].max()+1
    y_min, y_max = X2[:,1].min()-1, X2[:,1].max()+1
    xx, yy = np.meshgrid(
        np.linspace(x_min, x_max, 200),
        np.linspace(y_min, y_max, 200)
    )
    grid = np.c_[xx.ravel(), yy.ravel()]
    grid_orig = pca.inverse_transform(grid) if X.shape[1] > 2 else grid

    if algo.startswith("KMeans"):
        if centers is not None:
            dist_grid = np.linalg.norm(grid_orig[:,None,:] - centers[None,:,:], axis=2)
            labels_grid = np.argmin(dist_grid, axis=1)
        else:
            labels_grid = np.zeros(len(grid_orig), dtype=int)
    else:
        # DBSCAN kh√¥ng c√≥ decision boundary r√µ r√†ng, g√°n -1 cho t·∫•t c·∫£
        labels_grid = np.full(len(grid_orig), -1)

    # Plot
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))
    cmap = plt.cm.get_cmap('tab10', len(np.unique(labels)))
    # Decision Boundary
    plot_decision_boundary(ax1, xx, yy, labels_grid, cmap)
    ax1.scatter(X2[:,0], X2[:,1], c=labels, edgecolor='k', s=30, cmap=cmap)
    if centers2 is not None:
        ax1.scatter(centers2[:,0], centers2[:,1], marker='X', s=200, c='red')
    ax1.set_title("Ranh gi·ªõi quy·∫øt ƒë·ªãnh")
    # Cluster Scatter with Boundary
    plot_decision_boundary(ax2, xx, yy, labels_grid, cmap)
    ax2.scatter(X2[:,0], X2[:,1], c=labels, edgecolor='k', s=30, cmap=cmap)
    if centers2 is not None:
        ax2.scatter(centers2[:,0], centers2[:,1], marker='X', s=200, c='red')
    ax2.set_title("Ph√¢n b·ªë c·ª•m v√† ranh gi·ªõi")
    st.pyplot(fig)

    # 7. User explanation
    explanation = """
    **Gi·∫£i th√≠ch bi·ªÉu ƒë·ªì**:
    - **V√πng m√†u**: m·ªói v√πng bi·ªÉu th·ªã khu v·ª±c kh√¥ng gian m√† t·∫•t c·∫£ c√°c ƒëi·ªÉm trong ƒë√≥ s·∫Ω ƒë∆∞·ª£c g√°n v√†o c√πng m·ªôt c·ª•m.
      - V√πng **l·ªõn nh·∫•t** cho th·∫•y cluster ƒë√≥ c√≥ ph·∫°m vi ph√¢n b·ªë r·ªông v√† centroid c√°ch xa c√°c cluster kh√°c, nghƒ©a l√† m√¥ h√¨nh g√°n nhi·ªÅu kh√¥ng gian cho cluster n√†y.
      - V√πng **nh·ªè nh·∫•t** cho th·∫•y cluster t·∫≠p trung ch·∫∑t ch·∫Ω quanh centroid, chi·∫øm √≠t kh√¥ng gian h∆°n.
    - **ƒêi·ªÉm m√†u**: v·ªã tr√≠ c√°c m·∫´u d·ªØ li·ªáu, m√†u s·∫Øc th·ªÉ hi·ªán c·ª•m ƒë√£ ƒë∆∞·ª£c g√°n; m·∫≠t ƒë·ªô ƒëi·ªÉm trong m·ªói v√πng c√≤n ph·∫£n √°nh ƒë·ªô d√†y ƒë·∫∑c (density) c·ªßa d·ªØ li·ªáu.
    - **Ch·ªØ X ƒë·ªè**: v·ªã tr√≠ trung t√¢m (centroid) c·ªßa t·ª´ng c·ª•m; ƒë√¢y l√† ƒëi·ªÉm trung b√¨nh c·ªßa t·∫•t c·∫£ c√°c d·ªØ li·ªáu trong cluster.
    - **√ù nghƒ©a th·ª±c ti·ªÖn**:
      + Cluster c√≥ **v√πng l·ªõn** th∆∞·ªùng bao qu√°t c√°c kh√°ch h√†ng (ho·∫∑c m·∫´u) v·ªõi h√†nh vi/ph√¢n ph·ªëi ƒëa d·∫°ng h∆°n.
      + Cluster c√≥ **v√πng nh·ªè** th∆∞·ªùng ƒë·∫°i di·ªán cho nh√≥m m·∫´u c√≥ t√≠nh ch·∫•t ƒë·ªìng nh·∫•t v√† t·∫≠p trung.
    """
    st.markdown(explanation)

def plot_clusters(ax, X, labels, centroids=None, method_name="", cmap_name="tab10"):
    import matplotlib.patches as mpatches
    import numpy as np
    k = len(np.unique(labels))
    cmap = plt.get_cmap(cmap_name, k)
    scatter = ax.scatter(X[:, 0], X[:, 1], c=labels, cmap=cmap, s=50, alpha=0.8, edgecolor='k', linewidth=0.5)
    if centroids is not None:
        ax.scatter(centroids[:, 0], centroids[:, 1], c='red', marker='X', s=250, linewidths=3, edgecolor='black', label='Centroids')
        for i, (x, y) in enumerate(centroids):
            ax.text(x, y, f'C{i}', fontsize=14, fontweight='bold', color='black', ha='center', va='center', bbox=dict(facecolor='white', alpha=0.7, edgecolor='none'))
    ax.set_title(method_name)
    ax.set_xlabel("PC1")
    ax.set_ylabel("PC2")
    ax.grid(True, linestyle='--', alpha=0.3)
    handles = [mpatches.Patch(color=cmap(i), label=f'Cluster {i}') for i in range(k)]
    handles.append(mpatches.Patch(color='red', label='Centroids'))
    ax.legend(handles=handles, bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)